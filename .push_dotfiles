repo="/Users/rae/Projects/dotfiles/"
declare -a files_to_copy=(
    ".bash_profile"
    ".vimrc"
    ".push_dotfiles"
)

# if the first arg can be ran as a git command,
# runs it automatically w/~ as the working tree.
# ex "push_dotfiles diff" "push_dotfiles status"
if [[ $1 != [\"\']* ]]; then
    git --git-dir ${repo}/.git --work-tree ~ $1 2> /dev/null && return
fi

commit_msg=$1
if [ "${commit_msg}" == "" ]; then
    printf "Do you want a custom commit message? (y/n) "
    read custom
    if [ "${custom}" == "y" ]; then
        printf "Enter commit message: "
        read commit_msg
    fi
    if [[ "${custom}" != "y" || "${commit_msg}" == "" ]]; then
        commit_msg="dotfiles update $(date +"%Y-%m-%d %T")"
    fi
fi

echo "Copying dotfiles from ~ to ${repo}"
for f in "${files_to_copy[@]}"; do
    sudo cp ~/$f ${repo}/$f
done

cd ${repo}
git add .
git commit -m "${commit_msg}"
git push -u origin master

# assumes you were in ~ originally.
# function push_dotfiles in .bash_profile automatically returns to original
# working directory.
cd ~
